server:
  port: 8080
  http2:
    enabled: true
  max-http-request-header-size: 40KB

spring:
  application:
    name: api-gateway
  data:
    redis:
      cluster:
        nodes: ${spring_data_redis_cluster_nodes:redis-cluster-svc.default.svc.cluster.local:6379}
  http:
    encoding:
      enabled: true
      force: true
      charset: UTF-8
  cloud:
    discovery:
      client:
        health-indicator:
          enabled: false
    kubernetes:
      discovery:
        enabled: true
        discovery-server-url: http://api-registry-int-svc:7000
    gateway:
      filter:
        local-response-cache:
          enabled: false
        redis:
          cache:
            enabled: false
      globalcors:
        corsConfigurations:
          config:
            allowedMethods: "*"
            allowedHeaders: "*"
            maxAge: "3600"
            allowedOriginPatterns: "https://*.example.com"
      httpclient:
        wiretap: true
      httpserver:
        wiretap: true
        max-header-size: 40KB
      default-filters:
        - name: RequestHeaderFilter
          args:
            remove-unknown-headers: ${api_gateway_request-header-filter_remove_unknown_headers:true}
            skip-validation-for-apis: ${api_gateway_request-header-filter_skip_validation_for_apis:/api-docs/**,/v3/api-docs/**}
            allow-headers: ${api_gateway_request-header-filter_allow_headers:host, connection, content-type, content-length, accept, user-agent, "content-type, origin, referer, accept-encoding, accept-language, authorization}
            append-headers-if-missing: ${api_gateway_request-header-filter_append_headers_if_missing:correlationId}
            global-headers:
              - name: sessionId
                required: true # first level
                regex: "^[a-zA-Z0-9_]{5,10}$" # second level
main:
  web-application-type: reactive

jwt:
  keySources:
    - id: test
      type: PEM
      location: ./src/test/resources/test-certificate.pem
      default: true
requestBody:
  validation: true

# Schedular to refresh the api-routes for every 30 sec
api:
  registry:
    enabled: ${api_registry_enabled:false}
    base-url: ${api_registry_base-url:http://api-registry-int-svc:7000}
    route-path: /api/v1/routes
  isFilterOverrideEnabled: false
  overrideFilterConfig:
    JwtAuthValidator:
      filterName: CustomValidator
      #requestHeaderValidationConfig:
      #correlationId:
    #required: "true"
    #regexPattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
  caching:
    type: ${api_caching_type:local}
    enabled: ${api_caching_enabled:true}
    cacheName: ${api_caching_cache_name:DefaultCache}
    ttl: ${api_cache_ttl_min:5}
  routes:
    refreshCronJob: "*/30 * * * * *"

  dynamic:
    routes:
      enabled: false
  registered:
    services: "test-dmap"
  userId:
    field: "sub"
springdoc:
  version: '@springdoc.version@'
  swagger-ui:
    use-root-path: true

management:
  endpoint:
    info:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
    health:
      show-details: ALWAYS

logging:
  level:
    org.springframework.cloud.gateway: ERROR
    org.springframework.boot.context.config: ERROR
    org.springframework.boot.loader: ERROR

plugin:
  enabled: ${plugin_enabled:false}
  path: ${plugin_path:/external-libs}
  classes: ${plugin_classes:}

api-gateway:
  uri: ${api_gateway_uri:http://api-gateway-int-svc:7000/}